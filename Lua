local UILibrary = {}
UILibrary.__index = UILibrary

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Constants
local SCREEN_GUI_NAME = "UILibraryScreenGui"
local EASE_DIRECTION = Enum.EasingDirection.InOut
local EASE_STYLE = Enum.EasingStyle.Quad
local TWEEN_TIME = 0.15
local DRAG_MOUSE_OFFSET = Vector2.new(0, 36)

-- Utility functions
local function create(class, props)
    local instance = Instance.new(class)
    for prop, value in pairs(props) do
        if prop ~= "Parent" then
            if pcall(function() return instance[prop] end) then
                instance[prop] = value
            end
        end
    end
    if props.Parent then
        instance.Parent = props.Parent
    end
    return instance
end

local function tween(object, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(
        duration or TWEEN_TIME,
        easingStyle or EASE_STYLE,
        easingDirection or EASE_DIRECTION
    )
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

local function isMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

-- Main UI Container
function UILibrary.new()
    local self = setmetatable({}, UILibrary)
    
    -- ScreenGui setup
    local screenGui = game:GetService("CoreGui"):FindFirstChild(SCREEN_GUI_NAME)
    if not screenGui then
        screenGui = create("ScreenGui", {
            Name = SCREEN_GUI_NAME,
            ResetOnSpawn = false,
            DisplayOrder = 10,
            Parent = game:GetService("CoreGui")
        })
    end
    
    self.screenGui = screenGui
    self.windows = {}
    self.elements = {}
    
    -- Watermark setup
    self:CreateWatermark()
    
    return self
end

-- Watermark with player info and FPS
function UILibrary:CreateWatermark()
    local watermark = create("Frame", {
        Name = "Watermark",
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BackgroundTransparency = 0.3,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 10, 1, -40),
        Size = UDim2.new(0, 200, 0, 30),
        Parent = self.screenGui,
        AnchorPoint = Vector2.new(0, 1)
    })
    
    local corner = create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = watermark
    })
    
    local playerImage = create("ImageLabel", {
        Name = "PlayerImage",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 5, 0.5, -10),
        Size = UDim2.new(0, 20, 0, 20),
        Parent = watermark
    })
    
    local playerName = create("TextLabel", {
        Name = "PlayerName",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 30, 0, 0),
        Size = UDim2.new(0.5, -35, 1, 0),
        Font = Enum.Font.Gotham,
        Text = LocalPlayer.Name,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = watermark
    })
    
    local fpsCounter = create("TextLabel", {
        Name = "FPSCounter",
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 5, 0, 0),
        Size = UDim2.new(0.5, -5, 1, 0),
        Font = Enum.Font.Gotham,
        Text = "FPS: 0",
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = watermark
    })
    
    -- Set player image
    local userId = LocalPlayer.UserId
    playerImage.Image = "https://www.roblox.com/headshot-thumbnail/image?userId="..userId.."&width=420&height=420&format=png"
    
    -- FPS counter
    local lastTick = tick()
    local frames = 0
    
    RunService.Heartbeat:Connect(function()
        frames = frames + 1
        if tick() - lastTick >= 1 then
            fpsCounter.Text = "FPS: "..frames
            frames = 0
            lastTick = tick()
        end
    end)
    
    self.watermark = watermark
end

-- Window creation
function UILibrary:CreateWindow(title, size, position)
    local window = create("Frame", {
        Name = "Window",
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BorderSizePixel = 0,
        Size = size or UDim2.new(0, 300, 0, 400),
        Position = position or UDim2.new(0.5, -150, 0.5, -200),
        Parent = self.screenGui,
        ClipsDescendants = true
    })
    
    local corner = create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = window
    })
    
    local dropShadow = create("ImageLabel", {
        Name = "DropShadow",
        Image = "rbxassetid://1316045217",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118),
        Size = UDim2.new(1, 20, 1, 20),
        Position = UDim2.new(0, -10, 0, -10),
        BackgroundTransparency = 1,
        Parent = window
    })
    
    local titleBar = create("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = window
    })
    
    local titleCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = titleBar
    })
    
    local titleText = create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -20, 1, 0),
        Font = Enum.Font.GothamSemibold,
        Text = title or "Window",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = titleBar
    })
    
    local closeButton = create("TextButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -30, 0, 0),
        Size = UDim2.new(0, 30, 1, 0),
        Font = Enum.Font.Gotham,
        Text = "Ã—",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20,
        Parent = titleBar
    })
    
    local container = create("ScrollingFrame", {
        Name = "Container",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 1, -30),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 3,
        ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100),
        Parent = window
    })
    
    local listLayout = create("UIListLayout", {
        Name = "ListLayout",
        Padding = UDim.new(0, 5),
        Parent = container
    })
    
    -- Dragging functionality
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        window.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = window.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and dragging then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
    
    -- Close button
    closeButton.MouseButton1Click:Connect(function()
        tween(window, {Size = UDim2.new(window.Size.X.Scale, window.Size.X.Offset, 0, 0)}, 0.2)
        wait(0.2)
        window:Destroy()
    end)
    
    -- Update container size when elements are added
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        container.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 10)
    end)
    
    local windowObj = {
        Instance = window,
        Container = container,
        Title = titleText,
        CloseButton = closeButton
    }
    
    table.insert(self.windows, windowObj)
    return windowObj
end

-- Section creation
function UILibrary:CreateSection(window, title)
    local section = create("Frame", {
        Name = "Section",
        BackgroundColor3 = Color3.fromRGB(35, 35, 35),
        Size = UDim2.new(1, -20, 0, 30),
        Parent = window.Container
    })
    
    local corner = create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = section
    })
    
    local titleText = create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(1, -10, 1, 0),
        Font = Enum.Font.Gotham,
        Text = title or "Section",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = section
    })
    
    local content = create("Frame", {
        Name = "Content",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(1, 0, 0, 0),
        Parent = section
    })
    
    local listLayout = create("UIListLayout", {
        Name = "ListLayout",
        Padding = UDim.new(0, 5),
        Parent = content
    })
    
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        content.Size = UDim2.new(1, 0, 0, listLayout.AbsoluteContentSize.Y)
        section.Size = UDim2.new(1, -20, 0, 30 + listLayout.AbsoluteContentSize.Y)
    end)
    
    return {
        Instance = section,
        Content = content,
        Title = titleText
    }
end

-- Button creation
function UILibrary:CreateButton(parent, text, callback)
    local button = create("TextButton", {
        Name = "Button",
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        Font = Enum.Font.Gotham,
        Text = text or "Button",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Parent = parent.Content or parent.Container or parent
    })
    
    local corner = create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = button
    })
    
    button.MouseEnter:Connect(function()
        tween(button, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
    end)
    
    button.MouseLeave:Connect(function()
        tween(button, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)})
    end)
    
    button.MouseButton1Down:Connect(function()
        tween(button, {BackgroundColor3 = Color3.fromRGB(40, 40, 40)})
    end)
    
    button.MouseButton1Up:Connect(function()
        tween(button, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
        if callback then
            callback()
        end
    end)
    
    return button
end

-- Toggle button creation
function UILibrary:CreateToggle(parent, text, default, callback)
    local toggle = create("Frame", {
        Name = "Toggle",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = parent.Content or parent.Container or parent
    })
    
    local label = create("TextLabel", {
        Name = "Label",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0.7, 0, 1, 0),
        Font = Enum.Font.Gotham,
        Text = text or "Toggle",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggle
    })
    
    local toggleFrame = create("Frame", {
        Name = "ToggleFrame",
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Position = UDim2.new(0.7, 0, 0.5, -10),
        Size = UDim2.new(0.3, 0, 0, 20),
        AnchorPoint = Vector2.new(0, 0.5),
        Parent = toggle
    })
    
    local toggleCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = toggleFrame
    })
    
    local toggleButton = create("Frame", {
        Name = "ToggleButton",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Position = UDim2.new(0, 2, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        AnchorPoint = Vector2.new(0, 0.5),
        Parent = toggleFrame
    })
    
    local buttonCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = toggleButton
    })
    
    local state = default or false
    
    local function updateToggle()
        if state then
            tween(toggleFrame, {BackgroundColor3 = Color3.fromRGB(0, 170, 255)})
            tween(toggleButton, {Position = UDim2.new(1, -18, 0.5, -8)})
        else
            tween(toggleFrame, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)})
            tween(toggleButton, {Position = UDim2.new(0, 2, 0.5, -8)})
        end
    end
    
    updateToggle()
    
    local function toggleState()
        state = not state
        updateToggle()
        if callback then
            callback(state)
        end
    end
    
    toggleFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            toggleState()
        end
    end)
    
    return {
        Instance = toggle,
        SetState = function(newState)
            state = newState
            updateToggle()
        end,
        GetState = function()
            return state
        end,
        Toggle = toggleState
    }
end

-- Slider creation
function UILibrary:CreateSlider(parent, text, min, max, default, callback)
    local slider = create("Frame", {
        Name = "Slider",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 50),
        Parent = parent.Content or parent.Container or parent
    })
    
    local label = create("TextLabel", {
        Name = "Label",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 20),
        Font = Enum.Font.Gotham,
        Text = text or "Slider",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = slider
    })
    
    local valueText = create("TextLabel", {
        Name = "ValueText",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 20),
        Size = UDim2.new(1, 0, 0, 15),
        Font = Enum.Font.Gotham,
        Text = tostring(default or min).." / "..tostring(max),
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = slider
    })
    
    local track = create("Frame", {
        Name = "Track",
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        Position = UDim2.new(0, 0, 0, 40),
        Size = UDim2.new(1, 0, 0, 5),
        Parent = slider
    })
    
    local trackCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = track
    })
    
    local fill = create("Frame", {
        Name = "Fill",
        BackgroundColor3 = Color3.fromRGB(0, 170, 255),
        Size = UDim2.new(0, 0, 1, 0),
        Parent = track
    })
    
    local fillCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = fill
    })
    
    local thumb = create("Frame", {
        Name = "Thumb",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Position = UDim2.new(0, 0, 0.5, -8),
        Size = UDim2.new(0, 16, 0, 16),
        AnchorPoint = Vector2.new(0, 0.5),
        Parent = track
    })
    
    local thumbCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = thumb
    })
    
    min = min or 0
    max = max or 100
    default = default or min
    
    local value = math.clamp(default, min, max)
    local dragging = false
    
    local function updateSlider()
        local ratio = (value - min) / (max - min)
        fill.Size = UDim2.new(ratio, 0, 1, 0)
        thumb.Position = UDim2.new(ratio, -8, 0.5, 0)
        valueText.Text = string.format("%.1f / %.1f", value, max)
    end
    
    updateSlider()
    
    local function setValue(newValue)
        value = math.clamp(newValue, min, max)
        updateSlider()
        if callback then
            callback(value)
        end
    end
    
    local function updateFromInput(input)
        local absoluteX = input.Position.X
        local trackAbsolutePos = track.AbsolutePosition.X
        local trackAbsoluteSize = track.AbsoluteSize.X
        
        local relativeX = (absoluteX - trackAbsolutePos) / trackAbsoluteSize
        relativeX = math.clamp(relativeX, 0, 1)
        
        local newValue = min + (max - min) * relativeX
        setValue(newValue)
    end
    
    track.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            updateFromInput(input)
        end
    end)
    
    track.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateFromInput(input)
        end
    end)
    
    return {
        Instance = slider,
        SetValue = setValue,
        GetValue = function() return value end
    }
end

-- Text box creation
function UILibrary:CreateTextBox(parent, text, placeholder, callback)
    local textBox = create("Frame", {
        Name = "TextBox",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 40),
        Parent = parent.Content or parent.Container or parent
    })
    
    local label = create("TextLabel", {
        Name = "Label",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 15),
        Font = Enum.Font.Gotham,
        Text = text or "Input",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = textBox
    })
    
    local input = create("TextBox", {
        Name = "Input",
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 20),
        Size = UDim2.new(1, 0, 0, 20),
        Font = Enum.Font.Gotham,
        PlaceholderText = placeholder or "Type here...",
        PlaceholderColor3 = Color3.fromRGB(150, 150, 150),
        Text = "",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = textBox
    })
    
    local corner = create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = input
    })
    
    input.Focused:Connect(function()
        tween(input, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
    end)
    
    input.FocusLost:Connect(function()
        tween(input, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)})
        if callback then
            callback(input.Text)
        end
    end)
    
    return {
        Instance = textBox,
        GetText = function() return input.Text end,
        SetText = function(newText) input.Text = newText end
    }
end

-- Dropdown creation
function UILibrary:CreateDropdown(parent, text, options, default, callback)
    local dropdown = create("Frame", {
        Name = "Dropdown",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 30),
        Parent = parent.Content or parent.Container or parent
    })
    
    local label = create("TextLabel", {
        Name = "Label",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 15),
        Font = Enum.Font.Gotham,
        Text = text or "Dropdown",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = dropdown
    })
    
    local button = create("TextButton", {
        Name = "Button",
        BackgroundColor3 = Color3.fromRGB(50, 50, 50),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 20),
        Size = UDim2.new(1, 0, 0, 25),
        Font = Enum.Font.Gotham,
        Text = default or "Select",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = dropdown
    })
    
    local corner = create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = button
    })
    
    local arrow = create("ImageLabel", {
        Name = "Arrow",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -20, 0.5, -5),
        Size = UDim2.new(0, 10, 0, 10),
        AnchorPoint = Vector2.new(1, 0.5),
        Image = "rbxassetid://3926305904",
        ImageColor3 = Color3.fromRGB(255, 255, 255),
        ImageRectOffset = Vector2.new(964, 324),
        ImageRectSize = Vector2.new(36, 36),
        Parent = button
    })
    
    local list = create("Frame", {
        Name = "List",
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, 5),
        Size = UDim2.new(1, 0, 0, 0),
        Visible = false,
        Parent = button
    })
    
    local listCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = list
    })
    
    local listLayout = create("UIListLayout", {
        Name = "ListLayout",
        Parent = list
    })
    
    local selected = default
    local isOpen = false
    
    local function updateDropdown()
        if isOpen then
            tween(arrow, {Rotation = 180})
            tween(list, {Size = UDim2.new(1, 0, 0, #options * 25)})
            list.Visible = true
        else
            tween(arrow, {Rotation = 0})
            tween(list, {Size = UDim2.new(1, 0, 0, 0)})
            wait(0.2)
            list.Visible = false
        end
    end
    
    local function selectOption(option)
        selected = option
        button.Text = option
        isOpen = false
        updateDropdown()
        if callback then
            callback(option)
        end
    end
    
    for _, option in ipairs(options) do
        local optionButton = create("TextButton", {
            Name = option,
            BackgroundColor3 = Color3.fromRGB(50, 50, 50),
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 25),
            Font = Enum.Font.Gotham,
            Text = option,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            Parent = list
        })
        
        optionButton.MouseButton1Click:Connect(function()
            selectOption(option)
        end)
    end
    
    button.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        updateDropdown()
    end)
    
    return {
        Instance = dropdown,
        GetSelected = function() return selected end,
        SetSelected = function(option)
            if table.find(options, option) then
                selectOption(option)
            end
        end
    }
end

-- Color picker creation
function UILibrary:CreateColorPicker(parent, text, default, callback)
    local colorPicker = create("Frame", {
        Name = "ColorPicker",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 70),
        Parent = parent.Content or parent.Container or parent
    })
    
    local label = create("TextLabel", {
        Name = "Label",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 0, 15),
        Font = Enum.Font.Gotham,
        Text = text or "Color Picker",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = colorPicker
    })
    
    local preview = create("Frame", {
        Name = "Preview",
        BackgroundColor3 = default or Color3.fromRGB(255, 0, 0),
        Position = UDim2.new(0, 0, 0, 20),
        Size = UDim2.new(0, 50, 0, 50),
        Parent = colorPicker
    })
    
    local previewCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = preview
    })
    
    local hueSlider = create("Frame", {
        Name = "HueSlider",
        BackgroundColor3 = Color3.fromRGB(255, 0, 0),
        Position = UDim2.new(0, 60, 0, 20),
        Size = UDim2.new(1, -60, 0, 10),
        Parent = colorPicker
    })
    
    local hueCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = hueSlider
    })
    
    local hueGradient = create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
            ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 0, 255))),
            ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 0, 255)),
            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
            ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 255, 0)),
            ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 255, 0)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0)))
        }),
        Parent = hueSlider
    })
    
    local hueThumb = create("Frame", {
        Name = "HueThumb",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -5, 0, -3),
        Size = UDim2.new(0, 10, 0, 16),
        Parent = hueSlider
    })
    
    local hueThumbCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = hueThumb
    })
    
    local saturationValue = create("Frame", {
        Name = "SaturationValue",
        BackgroundColor3 = Color3.fromRGB(255, 0, 0),
        Position = UDim2.new(0, 60, 0, 40),
        Size = UDim2.new(1, -60, 0, 10),
        Parent = colorPicker
    })
    
    local svCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = saturationValue
    })
    
    local svThumb = create("Frame", {
        Name = "SVThumb",
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -5, 0, -3),
        Size = UDim2.new(0, 10, 0, 16),
        Parent = saturationValue
    })
    
    local svThumbCorner = create("UICorner", {
        CornerRadius = UDim.new(0, 3),
        Parent = svThumb
    })
    
    local currentColor = default or Color3.fromRGB(255, 0, 0)
    local hue = 0
    local saturation = 1
    local value = 1
    
    local function updateColor()
        currentColor = Color3.fromHSV(hue, saturation, value)
        preview.BackgroundColor3 = currentColor
        saturationValue.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
        if callback then
            callback(currentColor)
        end
    end
    
    local function updateFromHue(input)
        local absoluteX = input.Position.X
        local sliderAbsolutePos = hueSlider.AbsolutePosition.X
        local sliderAbsoluteSize = hueSlider.AbsoluteSize.X
        
        local relativeX = (absoluteX - sliderAbsolutePos) / sliderAbsoluteSize
        relativeX = math.clamp(relativeX, 0, 1)
        
        hue = relativeX
        updateColor()
    end
    
    local function updateFromSV(input)
        local absoluteX = input.Position.X
        local sliderAbsolutePos = saturationValue.AbsolutePosition.X
        local sliderAbsoluteSize = saturationValue.AbsoluteSize.X
        
        local relativeX = (absoluteX - sliderAbsolutePos) / sliderAbsoluteSize
        relativeX = math.clamp(relativeX, 0, 1)
        
        saturation = relativeX
        value = 1 - relativeX
        updateColor()
    end
    
    hueSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            updateFromHue(input)
        end
    end)
    
    saturationValue.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            updateFromSV(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            if input.UserInputState == Enum.UserInputState.Change then
                if hueThumb.Parent and svThumb.Parent then
                    if input.Position.X >= hueSlider.AbsolutePosition.X and input.Position.X <= hueSlider.AbsolutePosition.X + hueSlider.AbsoluteSize.X and
                       input.Position.Y >= hueSlider.AbsolutePosition.Y and input.Position.Y <= hueSlider.AbsolutePosition.Y + hueSlider.AbsoluteSize.Y then
                        updateFromHue(input)
                    elseif input.Position.X >= saturationValue.AbsolutePosition.X and input.Position.X <= saturationValue.AbsolutePosition.X + saturationValue.AbsoluteSize.X and
                           input.Position.Y >= saturationValue.AbsolutePosition.Y and input.Position.Y <= saturationValue.AbsolutePosition.Y + saturationValue.AbsoluteSize.Y then
                        updateFromSV(input)
                    end
                end
            end
        end
    end)
    
    return {
        Instance = colorPicker,
        GetColor = function() return currentColor end,
        SetColor = function(color)
            currentColor = color
            hue, saturation, value = Color3.toHSV(color)
            updateColor()
        end
    }
end

return UILibrary
