-- Synth UI Library
local Synth = {}

local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Remove existing UI if in studio
pcall(function()
    if RunService:IsStudio() then
        local existingUI = LocalPlayer:FindFirstChild("PlayerGui"):FindFirstChild("Synth UI")
        if existingUI then existingUI:Destroy() end
    end
end)

-- Helper functions
local function CreateRippleEffect(button)
    local Clickbox = Instance.new("TextButton", button)
    Clickbox.Text = ""
    Clickbox.Size = UDim2.fromScale(1, 1)
    Clickbox.ZIndex = 2
    Clickbox.BackgroundTransparency = 1
    
    Clickbox.MouseButton1Click:Connect(function()
        local mouse = UserInputService:GetMouseLocation()
        local ripple = Instance.new("Frame", button)
        ripple.BackgroundColor3 = Color3.fromRGB(33, 97, 200)
        ripple.Size = UDim2.fromOffset(0, 0)
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.Position = UDim2.fromOffset(
            mouse.X - button.AbsolutePosition.X,
            mouse.Y - button.AbsolutePosition.Y
        )
        
        local corner = Instance.new("UICorner", ripple)
        corner.CornerRadius = UDim.new(1, 0)
        
        TweenService:Create(ripple, TweenInfo.new(0.76, Enum.EasingStyle.Quint), {
            Size = UDim2.fromOffset(50, 50),
            BackgroundTransparency = 1
        }):Play()
        
        game.Debris:AddItem(ripple, 0.76)
    end)
    
    button.ClipsDescendants = true
end

local function MakeDraggable(frame, handle)
    local dragToggle, dragInput, dragStart, startPos
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        local position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X,
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
        TweenService:Create(frame, TweenInfo.new(0.1), {Position = position}):Play()
    end
    
    handle.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or 
            input.UserInputType == Enum.UserInputType.Touch) then
            dragToggle = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            updateInput(input)
        end
    end)
end

-- Main UI creation
function Synth.CreateWindow(options)
    options = options or {}
    local windowName = options.Name or "Synth UI"
    local size = options.Size or UDim2.fromOffset(570, 340)
    local themeColor = options.ThemeColor or Color3.fromRGB(52, 164, 216)
    
    -- Main UI Container
    local SynthUI = Instance.new("ScreenGui")
    SynthUI.Name = "Synth UI"
    SynthUI.Parent = RunService:IsStudio() and LocalPlayer.PlayerGui or game.CoreGui
    SynthUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    SynthUI.ResetOnSpawn = false
    
    -- Mobile Toggle Button
    local mobileToggle = Instance.new("ImageButton")
    mobileToggle.Name = "MobileToggle"
    mobileToggle.Parent = SynthUI
    mobileToggle.AnchorPoint = Vector2.new(0, 0.5)
    mobileToggle.Position = UDim2.new(0, 10, 0.5, 0)
    mobileToggle.Size = UDim2.fromOffset(40, 40)
    mobileToggle.BackgroundTransparency = 1
    mobileToggle.Image = "rbxassetid://11166554199" -- Default image, replace with your own
    mobileToggle.Visible = UserInputService.TouchEnabled
    
    -- Main Container
    local mainContainer = Instance.new("Frame")
    mainContainer.Name = "MainContainer"
    mainContainer.Parent = SynthUI
    mainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    mainContainer.BackgroundColor3 = Color3.fromRGB(44, 45, 44)
    mainContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
    mainContainer.Size = size
    mainContainer.Active = true
    
    -- Border with gradient
    local border = Instance.new("Frame")
    border.Name = "Border"
    border.Parent = mainContainer
    border.AnchorPoint = Vector2.new(0.5, 0.5)
    border.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    border.Position = UDim2.new(0.5, 0, 0.5, 0)
    border.Size = UDim2.new(1, -8, 1, -8)
    
    local borderGradient = Instance.new("UIGradient")
    borderGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(44, 174, 255)),
        ColorSequenceKeypoint.new(0.42, Color3.fromRGB(82, 212, 255)),
        ColorSequenceKeypoint.new(0.47, Color3.fromRGB(42, 92, 255)),
        ColorSequenceKeypoint.new(0.52, Color3.fromRGB(82, 212, 255)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(123, 253, 255))
    }
    borderGradient.Rotation = -180
    borderGradient.Parent = border
    
    -- Animate gradient
    spawn(function()
        while task.wait() do
            borderGradient.Rotation = (borderGradient.Rotation + 1) % 360
        end
    end)
    
    -- Real Container
    local realContainer = Instance.new("Frame")
    realContainer.Name = "RealContainer"
    realContainer.Parent = border
    realContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    realContainer.BackgroundColor3 = Color3.fromRGB(44, 45, 44)
    realContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
    realContainer.Size = UDim2.new(1, -4, 1, -4)
    
    -- Top Bar
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Parent = realContainer
    topBar.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
    topBar.Position = UDim2.new(0, 5, 0, 5)
    topBar.Size = UDim2.new(1, -10, 0, 35)
    
    -- Window Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Parent = topBar
    titleLabel.BackgroundTransparency = 1
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.Size = UDim2.new(0, 200, 1, 0)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = windowName
    titleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Close Button
    local closeButton = Instance.new("ImageButton")
    closeButton.Name = "CloseButton"
    closeButton.Parent = topBar
    closeButton.AnchorPoint = Vector2.new(1, 0.5)
    closeButton.Position = UDim2.new(1, -5, 0.5, 0)
    closeButton.Size = UDim2.fromOffset(20, 20)
    closeButton.BackgroundTransparency = 1
    closeButton.Image = "rbxassetid://3926305904" -- X icon
    closeButton.ImageColor3 = Color3.fromRGB(220, 220, 220)
    
    closeButton.MouseButton1Click:Connect(function()
        SynthUI:Destroy()
    end)
    
    -- Nav Bar
    local navBar = Instance.new("Frame")
    navBar.Name = "NavBar"
    navBar.Parent = realContainer
    navBar.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
    navBar.Position = UDim2.new(0, 5, 0, 40)
    navBar.Size = UDim2.new(0, 135, 1, -45)
    
    -- Tabs Label
    local tabsLabel = Instance.new("TextLabel")
    tabsLabel.Name = "TabsLabel"
    tabsLabel.Parent = navBar
    tabsLabel.BackgroundTransparency = 1
    tabsLabel.Position = UDim2.new(0, 5, 0, 5)
    tabsLabel.Size = UDim2.new(1, -10, 0, 20)
    tabsLabel.Font = Enum.Font.GothamBold
    tabsLabel.Text = "TABS"
    tabsLabel.TextColor3 = Color3.fromRGB(156, 156, 156)
    tabsLabel.TextSize = 14
    tabsLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Tabs Container
    local tabsContainer = Instance.new("ScrollingFrame")
    tabsContainer.Name = "Tabs"
    tabsContainer.Parent = navBar
    tabsContainer.BackgroundTransparency = 1
    tabsContainer.Position = UDim2.new(0, 5, 0, 30)
    tabsContainer.Size = UDim2.new(1, -10, 1, -35)
    tabsContainer.ScrollBarThickness = 0
    tabsContainer.AutomaticCanvasSize = Enum.AutomaticSize.Y
    
    local tabsLayout = Instance.new("UIListLayout")
    tabsLayout.Parent = tabsContainer
    tabsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabsLayout.Padding = UDim.new(0, 5)
    
    -- Content Area
    local contentArea = Instance.new("Frame")
    contentArea.Name = "ContentArea"
    contentArea.Parent = realContainer
    contentArea.BackgroundColor3 = Color3.fromRGB(41, 42, 41)
    contentArea.Position = UDim2.new(0, 147, 0, 47)
    contentArea.Size = UDim2.new(1, -160, 1, -57)
    
    -- Watermark
    local watermark = Instance.new("TextLabel")
    watermark.Name = "Watermark"
    watermark.Parent = realContainer
    watermark.AnchorPoint = Vector2.new(1, 1)
    watermark.BackgroundTransparency = 1
    watermark.Position = UDim2.new(1, -5, 1, -5)
    watermark.Size = UDim2.new(0, 200, 0, 15)
    watermark.Font = Enum.Font.Gotham
    watermark.Text = "Synth UI â€¢ v1.0"
    watermark.TextColor3 = Color3.fromRGB(120, 120, 120)
    watermark.TextSize = 12
    watermark.TextXAlignment = Enum.TextXAlignment.Right
    
    -- Player Profile Image
    local profileImage = Instance.new("ImageLabel")
    profileImage.Name = "ProfileImage"
    profileImage.Parent = realContainer
    profileImage.AnchorPoint = Vector2.new(0, 1)
    profileImage.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    profileImage.Position = UDim2.new(0, 5, 1, -5)
    profileImage.Size = UDim2.fromOffset(25, 25)
    profileImage.Image = Players:GetUserThumbnailAsync(
        LocalPlayer.UserId,
        Enum.ThumbnailType.HeadShot,
        Enum.ThumbnailSize.Size100x100
    )
    
    -- Make draggable
    MakeDraggable(mainContainer, topBar)
    
    -- Mobile toggle functionality
    local uiVisible = true
    mobileToggle.MouseButton1Click:Connect(function()
        uiVisible = not uiVisible
        mainContainer.Visible = uiVisible
    end)
    
    -- Tab management
    local tabs = {}
    
    local window = {
        CreateTab = function(tabName)
            local tabButton = Instance.new("TextButton")
            tabButton.Name = tabName
            tabButton.Parent = tabsContainer
            tabButton.BackgroundTransparency = 1
            tabButton.Size = UDim2.new(1, 0, 0, 25)
            tabButton.Font = Enum.Font.GothamBold
            tabButton.Text = tabName
            tabButton.TextColor3 = Color3.fromRGB(180, 180, 180)
            tabButton.TextSize = 14
            tabButton.TextXAlignment = Enum.TextXAlignment.Left
            
            local tabGradient = Instance.new("UIGradient")
            tabGradient.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0.00, Color3.fromRGB(44, 174, 255)),
                ColorSequenceKeypoint.new(1.00, Color3.fromRGB(123, 253, 255))
            }
            tabGradient.Rotation = -180
            tabGradient.Enabled = false
            tabGradient.Parent = tabButton
            
            local tabContent = Instance.new("ScrollingFrame")
            tabContent.Name = tabName.."Content"
            tabContent.Parent = contentArea
            tabContent.BackgroundTransparency = 1
            tabContent.Size = UDim2.new(1, -10, 1, -10)
            tabContent.Position = UDim2.new(0, 5, 0, 5)
            tabContent.ScrollBarThickness = 3
            tabContent.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80)
            tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
            tabContent.Visible = false
            
            local contentLayout = Instance.new("UIListLayout")
            contentLayout.Parent = tabContent
            contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
            contentLayout.Padding = UDim.new(0, 10)
            
            -- Tab selection logic
            local function selectTab()
                for _, tab in pairs(tabs) do
                    tab.content.Visible = false
                    tab.button.TextColor3 = Color3.fromRGB(180, 180, 180)
                    tab.button.UIGradient.Enabled = false
                end
                
                tabContent.Visible = true
                tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                tabGradient.Enabled = true
            end
            
            tabButton.MouseButton1Click:Connect(selectTab)
            
            -- Add ripple effect
            CreateRippleEffect(tabButton)
            
            -- Store tab data
            local tabData = {
                button = tabButton,
                content = tabContent,
                CreateSection = function(sectionName, alignment)
                    alignment = alignment or "Left"
                    
                    local section = Instance.new("Frame")
                    section.Name = "Section"
                    section.Parent = tabContent
                    section.BackgroundTransparency = 1
                    section.Size = UDim2.new(1, 0, 0, 30)
                    
                    local sectionTitle = Instance.new("TextLabel")
                    sectionTitle.Name = "Title"
                    sectionTitle.Parent = section
                    sectionTitle.BackgroundTransparency = 1
                    sectionTitle.Size = UDim2.new(1, 0, 0, 20)
                    sectionTitle.Font = Enum.Font.GothamBold
                    sectionTitle.Text = sectionName
                    sectionTitle.TextColor3 = Color3.fromRGB(220, 220, 220)
                    sectionTitle.TextSize = 14
                    
                    if alignment == "Center" then
                        sectionTitle.TextXAlignment = Enum.TextXAlignment.Center
                    elseif alignment == "Right" then
                        sectionTitle.TextXAlignment = Enum.TextXAlignment.Right
                    else
                        sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
                    end
                    
                    local underline = Instance.new("Frame")
                    underline.Name = "Underline"
                    underline.Parent = section
                    underline.Position = UDim2.new(0, 0, 0, 25)
                    underline.Size = UDim2.new(1, 0, 0, 1)
                    underline.BackgroundColor3 = themeColor
                    
                    local sectionContent = Instance.new("Frame")
                    sectionContent.Name = "Content"
                    sectionContent.Parent = section
                    sectionContent.BackgroundTransparency = 1
                    sectionContent.Position = UDim2.new(0, 0, 0, 30)
                    sectionContent.Size = UDim2.new(1, 0, 0, 0)
                    sectionContent.AutomaticSize = Enum.AutomaticSize.Y
                    
                    local sectionLayout = Instance.new("UIListLayout")
                    sectionLayout.Parent = sectionContent
                    sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
                    sectionLayout.Padding = UDim.new(0, 5)
                    
                    return {
                        CreateLabel = function(text, alignment)
                            alignment = alignment or "Left"
                            
                            local label = Instance.new("TextLabel")
                            label.Name = "Label"
                            label.Parent = sectionContent
                            label.BackgroundTransparency = 1
                            label.Size = UDim2.new(1, 0, 0, 20)
                            label.Font = Enum.Font.Gotham
                            label.Text = text
                            label.TextColor3 = Color3.fromRGB(200, 200, 200)
                            label.TextSize = 14
                            
                            if alignment == "Center" then
                                label.TextXAlignment = Enum.TextXAlignment.Center
                            elseif alignment == "Right" then
                                label.TextXAlignment = Enum.TextXAlignment.Right
                            else
                                label.TextXAlignment = Enum.TextXAlignment.Left
                            end
                            
                            return label
                        end,
                        
                        CreateButton = function(buttonName, callback)
                            local button = Instance.new("Frame")
                            button.Name = "Button"
                            button.Parent = sectionContent
                            button.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            button.Size = UDim2.new(1, 0, 0, 30)
                            
                            local buttonText = Instance.new("TextLabel")
                            buttonText.Name = "Text"
                            buttonText.Parent = button
                            buttonText.BackgroundTransparency = 1
                            buttonText.Position = UDim2.new(0, 10, 0, 0)
                            buttonText.Size = UDim2.new(1, -20, 1, 0)
                            buttonText.Font = Enum.Font.GothamBold
                            buttonText.Text = buttonName
                            buttonText.TextColor3 = Color3.fromRGB(220, 220, 220)
                            buttonText.TextSize = 14
                            buttonText.TextXAlignment = Enum.TextXAlignment.Left
                            
                            local buttonIcon = Instance.new("ImageLabel")
                            buttonIcon.Name = "Icon"
                            buttonIcon.Parent = button
                            buttonIcon.AnchorPoint = Vector2.new(1, 0.5)
                            buttonIcon.Position = UDim2.new(1, -10, 0.5, 0)
                            buttonIcon.Size = UDim2.fromOffset(20, 20)
                            buttonIcon.BackgroundTransparency = 1
                            buttonIcon.Image = "rbxassetid://3926305904" -- Replace with your icon
                            buttonIcon.ImageColor3 = themeColor
                            
                            local clickBox = Instance.new("TextButton")
                            clickBox.Name = "ClickBox"
                            clickBox.Parent = button
                            clickBox.Text = ""
                            clickBox.Size = UDim2.fromScale(1, 1)
                            clickBox.BackgroundTransparency = 1
                            clickBox.ZIndex = 2
                            
                            clickBox.MouseButton1Click:Connect(function()
                                if callback then callback() end
                            end)
                            
                            CreateRippleEffect(button)
                            
                            return {
                                UpdateText = function(newText)
                                    buttonText.Text = newText
                                end,
                                
                                UpdateCallback = function(newCallback)
                                    callback = newCallback
                                end
                            }
                        end,
                        
                        CreateToggle = function(toggleName, default, callback)
                            local toggle = Instance.new("Frame")
                            toggle.Name = "Toggle"
                            toggle.Parent = sectionContent
                            toggle.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            toggle.Size = UDim2.new(1, 0, 0, 30)
                            
                            local toggleText = Instance.new("TextLabel")
                            toggleText.Name = "Text"
                            toggleText.Parent = toggle
                            toggleText.BackgroundTransparency = 1
                            toggleText.Position = UDim2.new(0, 10, 0, 0)
                            toggleText.Size = UDim2.new(1, -100, 1, 0)
                            toggleText.Font = Enum.Font.GothamBold
                            toggleText.Text = toggleName
                            toggleText.TextColor3 = Color3.fromRGB(220, 220, 220)
                            toggleText.TextSize = 14
                            toggleText.TextXAlignment = Enum.TextXAlignment.Left
                            
                            local toggleFrame = Instance.new("Frame")
                            toggleFrame.Name = "ToggleFrame"
                            toggleFrame.Parent = toggle
                            toggleFrame.AnchorPoint = Vector2.new(1, 0.5)
                            toggleFrame.Position = UDim2.new(1, -10, 0.5, 0)
                            toggleFrame.Size = UDim2.fromOffset(50, 20)
                            toggleFrame.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
                            
                            local toggleCircle = Instance.new("Frame")
                            toggleCircle.Name = "ToggleCircle"
                            toggleCircle.Parent = toggleFrame
                            toggleCircle.AnchorPoint = Vector2.new(0, 0.5)
                            toggleCircle.Position = UDim2.new(0, 5, 0.5, 0)
                            toggleCircle.Size = UDim2.fromOffset(10, 10)
                            toggleCircle.BackgroundColor3 = Color3.fromRGB(220, 220, 220)
                            
                            -- Set initial state
                            local isToggled = default or false
                            if isToggled then
                                toggleFrame.BackgroundColor3 = themeColor
                                toggleCircle.Position = UDim2.new(1, -15, 0.5, 0)
                            end
                            
                            local clickBox = Instance.new("TextButton")
                            clickBox.Name = "ClickBox"
                            clickBox.Parent = toggle
                            clickBox.Text = ""
                            clickBox.Size = UDim2.fromScale(1, 1)
                            clickBox.BackgroundTransparency = 1
                            clickBox.ZIndex = 2
                            
                            clickBox.MouseButton1Click:Connect(function()
                                isToggled = not isToggled
                                
                                if isToggled then
                                    TweenService:Create(toggleFrame, TweenInfo.new(0.2), {
                                        BackgroundColor3 = themeColor
                                    }):Play()
                                    TweenService:Create(toggleCircle, TweenInfo.new(0.2), {
                                        Position = UDim2.new(1, -15, 0.5, 0)
                                    }):Play()
                                else
                                    TweenService:Create(toggleFrame, TweenInfo.new(0.2), {
                                        BackgroundColor3 = Color3.fromRGB(39, 40, 39)
                                    }):Play()
                                    TweenService:Create(toggleCircle, TweenInfo.new(0.2), {
                                        Position = UDim2.new(0, 5, 0.5, 0)
                                    }):Play()
                                end
                                
                                if callback then callback(isToggled) end
                            end)
                            
                            CreateRippleEffect(toggle)
                            
                            return {
                                SetValue = function(value)
                                    isToggled = value
                                    
                                    if isToggled then
                                        toggleFrame.BackgroundColor3 = themeColor
                                        toggleCircle.Position = UDim2.new(1, -15, 0.5, 0)
                                    else
                                        toggleFrame.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
                                        toggleCircle.Position = UDim2.new(0, 5, 0.5, 0)
                                    end
                                end,
                                
                                GetValue = function()
                                    return isToggled
                                end
                            }
                        end,
                        
                        CreateSlider = function(sliderName, min, max, default, callback)
                            local slider = Instance.new("Frame")
                            slider.Name = "Slider"
                            slider.Parent = sectionContent
                            slider.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            slider.Size = UDim2.new(1, 0, 0, 40)
                            
                            local sliderText = Instance.new("TextLabel")
                            sliderText.Name = "Text"
                            sliderText.Parent = slider
                            sliderText.BackgroundTransparency = 1
                            sliderText.Position = UDim2.new(0, 10, 0, 0)
                            sliderText.Size = UDim2.new(1, -20, 0, 20)
                            sliderText.Font = Enum.Font.GothamBold
                            sliderText.Text = sliderName
                            sliderText.TextColor3 = Color3.fromRGB(220, 220, 220)
                            sliderText.TextSize = 14
                            sliderText.TextXAlignment = Enum.TextXAlignment.Left
                            
                            local sliderFrame = Instance.new("Frame")
                            sliderFrame.Name = "SliderFrame"
                            sliderFrame.Parent = slider
                            sliderFrame.Position = UDim2.new(0, 10, 0, 25)
                            sliderFrame.Size = UDim2.new(1, -20, 0, 5)
                            sliderFrame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                            
                            local sliderFill = Instance.new("Frame")
                            sliderFill.Name = "SliderFill"
                            sliderFill.Parent = sliderFrame
                            sliderFill.Size = UDim2.new(0, 0, 1, 0)
                            sliderFill.BackgroundColor3 = themeColor
                            
                            local sliderValue = Instance.new("TextLabel")
                            sliderValue.Name = "Value"
                            sliderValue.Parent = slider
                            sliderValue.AnchorPoint = Vector2.new(1, 0)
                            sliderValue.Position = UDim2.new(1, -10, 0, 0)
                            sliderValue.Size = UDim2.new(0, 50, 0, 20)
                            sliderValue.BackgroundTransparency = 1
                            sliderValue.Font = Enum.Font.Gotham
                            sliderValue.Text = tostring(default)
                            sliderValue.TextColor3 = themeColor
                            sliderValue.TextSize = 14
                            sliderValue.TextXAlignment = Enum.TextXAlignment.Right
                            
                            -- Set initial value
                            local currentValue = math.clamp(default or min, min, max)
                            local percent = (currentValue - min) / (max - min)
                            sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                            sliderValue.Text = tostring(math.floor(currentValue))
                            
                            local isDragging = false
                            local clickBox = Instance.new("TextButton")
                            clickBox.Name = "ClickBox"
                            clickBox.Parent = sliderFrame
                            clickBox.Text = ""
                            clickBox.Size = UDim2.fromScale(1, 1)
                            clickBox.BackgroundTransparency = 1
                            clickBox.ZIndex = 2
                            
                            local function updateSlider(input)
                                local percent = math.clamp(
                                    (input.Position.X - sliderFrame.AbsolutePosition.X) / sliderFrame.AbsoluteSize.X,
                                    0, 1
                                )
                                local value = math.floor(min + (percent * (max - min)))
                                
                                sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                                sliderValue.Text = tostring(value)
                                
                                if value ~= currentValue then
                                    currentValue = value
                                    if callback then callback(value) end
                                end
                            end
                            
                            clickBox.MouseButton1Down:Connect(function()
                                isDragging = true
                                updateSlider(UserInputService:GetMouseLocation())
                            end)
                            
                            UserInputService.InputChanged:Connect(function(input)
                                if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                                    updateSlider(input)
                                end
                            end)
                            
                            UserInputService.InputEnded:Connect(function(input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    isDragging = false
                                end
                            end)
                            
                            return {
                                SetValue = function(value)
                                    value = math.clamp(value, min, max)
                                    currentValue = value
                                    local percent = (value - min) / (max - min)
                                    
                                    TweenService:Create(sliderFill, TweenInfo.new(0.2), {
                                        Size = UDim2.new(percent, 0, 1, 0)
                                    }):Play()
                                    
                                    sliderValue.Text = tostring(math.floor(value))
                                    
                                    if callback then callback(value) end
                                end,
                                
                                GetValue = function()
                                    return currentValue
                                end
                            }
                        end,
                        
                        CreateDropdown = function(dropdownName, options, default, callback)
                            local dropdown = Instance.new("Frame")
                            dropdown.Name = "Dropdown"
                            dropdown.Parent = sectionContent
                            dropdown.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            dropdown.Size = UDim2.new(1, 0, 0, 30)
                            dropdown.ClipsDescendants = true
                            
                            local dropdownText = Instance.new("TextLabel")
                            dropdownText.Name = "Text"
                            dropdownText.Parent = dropdown
                            dropdownText.BackgroundTransparency = 1
                            dropdownText.Position = UDim2.new(0, 10, 0, 0)
                            dropdownText.Size = UDim2.new(1, -40, 1, 0)
                            dropdownText.Font = Enum.Font.GothamBold
                            dropdownText.Text = dropdownName
                            dropdownText.TextColor3 = Color3.fromRGB(220, 220, 220)
                            dropdownText.TextSize = 14
                            dropdownText.TextXAlignment = Enum.TextXAlignment.Left
                            
                            local dropdownArrow = Instance.new("ImageLabel")
                            dropdownArrow.Name = "Arrow"
                            dropdownArrow.Parent = dropdown
                            dropdownArrow.AnchorPoint = Vector2.new(1, 0.5)
                            dropdownArrow.Position = UDim2.new(1, -10, 0.5, 0)
                            dropdownArrow.Size = UDim2.fromOffset(15, 15)
                            dropdownArrow.BackgroundTransparency = 1
                            dropdownArrow.Image = "rbxassetid://3926305904" -- Down arrow icon
                            dropdownArrow.ImageColor3 = themeColor
                            
                            local dropdownValue = Instance.new("TextLabel")
                            dropdownValue.Name = "Value"
                            dropdownValue.Parent = dropdown
                            dropdownValue.AnchorPoint = Vector2.new(1, 0)
                            dropdownValue.Position = UDim2.new(1, -30, 0, 0)
                            dropdownValue.Size = UDim2.new(0, 20, 1, 0)
                            dropdownValue.BackgroundTransparency = 1
                            dropdownValue.Font = Enum.Font.Gotham
                            dropdownValue.Text = tostring(default or options[1])
                            dropdownValue.TextColor3 = themeColor
                            dropdownValue.TextSize = 14
                            dropdownValue.TextXAlignment = Enum.TextXAlignment.Right
                            
                            local dropdownOptions = Instance.new("ScrollingFrame")
                            dropdownOptions.Name = "Options"
                            dropdownOptions.Parent = dropdown
                            dropdownOptions.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                            dropdownOptions.Position = UDim2.new(0, 0, 1, 0)
                            dropdownOptions.Size = UDim2.new(1, 0, 0, 0)
                            dropdownOptions.ScrollBarThickness = 3
                            dropdownOptions.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80)
                            dropdownOptions.AutomaticCanvasSize = Enum.AutomaticSize.Y
                            dropdownOptions.Visible = false
                            
                            local optionsLayout = Instance.new("UIListLayout")
                            optionsLayout.Parent = dropdownOptions
                            optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
                            
                            -- Create options
                            for _, option in ipairs(options) do
                                local optionButton = Instance.new("TextButton")
                                optionButton.Name = tostring(option)
                                optionButton.Parent = dropdownOptions
                                optionButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                                optionButton.Size = UDim2.new(1, 0, 0, 25)
                                optionButton.AutoButtonColor = false
                                optionButton.Font = Enum.Font.Gotham
                                optionButton.Text = tostring(option)
                                optionButton.TextColor3 = Color3.fromRGB(200, 200, 200)
                                optionButton.TextSize = 14
                                
                                optionButton.MouseButton1Click:Connect(function()
                                    dropdownValue.Text = tostring(option)
                                    dropdownOptions.Visible = false
                                    dropdown.Size = UDim2.new(1, 0, 0, 30)
                                    dropdownArrow.Rotation = 0
                                    
                                    if callback then callback(option) end
                                end)
                                
                                optionButton.MouseEnter:Connect(function()
                                    optionButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
                                end)
                                
                                optionButton.MouseLeave:Connect(function()
                                    optionButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                                end)
                            end
                            
                            local isOpen = false
                            local clickBox = Instance.new("TextButton")
                            clickBox.Name = "ClickBox"
                            clickBox.Parent = dropdown
                            clickBox.Text = ""
                            clickBox.Size = UDim2.fromScale(1, 1)
                            clickBox.BackgroundTransparency = 1
                            clickBox.ZIndex = 2
                            
                            clickBox.MouseButton1Click:Connect(function()
                                isOpen = not isOpen
                                
                                if isOpen then
                                    dropdownOptions.Visible = true
                                    dropdown.Size = UDim2.new(1, 0, 0, 30 + math.min(#options * 25, 125))
                                    dropdownArrow.Rotation = 180
                                else
                                    dropdownOptions.Visible = false
                                    dropdown.Size = UDim2.new(1, 0, 0, 30)
                                    dropdownArrow.Rotation = 0
                                end
                            end)
                            
                            CreateRippleEffect(dropdown)
                            
                            return {
                                SetOptions = function(newOptions, newDefault)
                                    -- Clear existing options
                                    for _, child in ipairs(dropdownOptions:GetChildren()) do
                                        if child:IsA("TextButton") then
                                            child:Destroy()
                                        end
                                    end
                                    
                                    -- Add new options
                                    for _, option in ipairs(newOptions) do
                                        local optionButton = Instance.new("TextButton")
                                        optionButton.Name = tostring(option)
                                        optionButton.Parent = dropdownOptions
                                        optionButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                                        optionButton.Size = UDim2.new(1, 0, 0, 25)
                                        optionButton.AutoButtonColor = false
                                        optionButton.Font = Enum.Font.Gotham
                                        optionButton.Text = tostring(option)
                                        optionButton.TextColor3 = Color3.fromRGB(200, 200, 200)
                                        optionButton.TextSize = 14
                                        
                                        optionButton.MouseButton1Click:Connect(function()
                                            dropdownValue.Text = tostring(option)
                                            dropdownOptions.Visible = false
                                            dropdown.Size = UDim2.new(1, 0, 0, 30)
                                            dropdownArrow.Rotation = 0
                                            
                                            if callback then callback(option) end
                                        end)
                                        
                                        optionButton.MouseEnter:Connect(function()
                                            optionButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
                                        end)
                                        
                                        optionButton.MouseLeave:Connect(function()
                                            optionButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                                        end)
                                    end
                                    
                                    -- Set default
                                    if newDefault then
                                        dropdownValue.Text = tostring(newDefault)
                                    end
                                end,
                                
                                SetValue = function(value)
                                    dropdownValue.Text = tostring(value)
                                    if callback then callback(value) end
                                end
                            }
                        end,
                        
                        CreateColorPicker = function(pickerName, defaultColor, callback)
                            local colorPicker = Instance.new("Frame")
                            colorPicker.Name = "ColorPicker"
                            colorPicker.Parent = sectionContent
                            colorPicker.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            colorPicker.Size = UDim2.new(1, 0, 0, 30)
                            
                            local pickerText = Instance.new("TextLabel")
                            pickerText.Name = "Text"
                            pickerText.Parent = colorPicker
                            pickerText.BackgroundTransparency = 1
                            pickerText.Position = UDim2.new(0, 10, 0, 0)
                            pickerText.Size = UDim2.new(1, -60, 1, 0)
                            pickerText.Font = Enum.Font.GothamBold
                            pickerText.Text = pickerName
                            pickerText.TextColor3 = Color3.fromRGB(220, 220, 220)
                            pickerText.TextSize = 14
                            pickerText.TextXAlignment = Enum.TextXAlignment.Left
                            
                            local pickerPreview = Instance.new("Frame")
                            pickerPreview.Name = "Preview"
                            pickerPreview.Parent = colorPicker
                            pickerPreview.AnchorPoint = Vector2.new(1, 0.5)
                            pickerPreview.Position = UDim2.new(1, -10, 0.5, 0)
                            pickerPreview.Size = UDim2.fromOffset(40, 20)
                            pickerPreview.BackgroundColor3 = defaultColor or Color3.fromRGB(255, 0, 0)
                            
                            local pickerPopup = Instance.new("Frame")
                            pickerPopup.Name = "Popup"
                            pickerPopup.Parent = colorPicker
                            pickerPopup.AnchorPoint = Vector2.new(1, 0)
                            pickerPopup.Position = UDim2.new(1, 0, 1, 5)
                            pickerPopup.Size = UDim2.fromOffset(150, 150)
                            pickerPopup.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                            pickerPopup.Visible = false
                            pickerPopup.ZIndex = 10
                            
                            -- Color spectrum
                            local colorSpectrum = Instance.new("ImageLabel")
                            colorSpectrum.Name = "Spectrum"
                            colorSpectrum.Parent = pickerPopup
                            colorSpectrum.Position = UDim2.new(0, 5, 0, 5)
                            colorSpectrum.Size = UDim2.fromOffset(140, 140)
                            colorSpectrum.Image = "rbxassetid://2615689005" -- Color spectrum image
                            
                            -- Brightness slider
                            local brightnessSlider = Instance.new("Frame")
                            brightnessSlider.Name = "BrightnessSlider"
                            brightnessSlider.Parent = pickerPopup
                            brightnessSlider.Position = UDim2.new(0, 5, 0, 150)
                            brightnessSlider.Size = UDim2.fromOffset(140, 10)
                            brightnessSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            
                            local brightnessGradient = Instance.new("UIGradient")
                            brightnessGradient.Color = ColorSequence.new{
                                ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                            }
                            brightnessGradient.Parent = brightnessSlider
                            
                            local brightnessHandle = Instance.new("Frame")
                            brightnessHandle.Name = "Handle"
                            brightnessHandle.Parent = brightnessSlider
                            brightnessHandle.AnchorPoint = Vector2.new(0.5, 0.5)
                            brightnessHandle.Position = UDim2.new(1, 0, 0.5, 0)
                            brightnessHandle.Size = UDim2.fromOffset(6, 14)
                            brightnessHandle.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
                            
                            local isDragging = false
                            local isDraggingBrightness = false
                            local currentColor = defaultColor or Color3.fromRGB(255, 0, 0)
                            local brightness = 1
                            
                            local function updateColor()
                                local finalColor = currentColor:Lerp(Color3.new(0, 0, 0), 1 - brightness)
                                pickerPreview.BackgroundColor3 = finalColor
                                if callback then callback(finalColor) end
                            end
                            
                            -- Color spectrum click
                            colorSpectrum.MouseButton1Down:Connect(function()
                                isDragging = true
                            end)
                            
                            colorSpectrum.MouseButton1Up:Connect(function()
                                isDragging = false
                            end)
                            
                            colorSpectrum.MouseMoved:Connect(function(x, y)
                                if isDragging then
                                    local relativeX = (x - colorSpectrum.AbsolutePosition.X) / colorSpectrum.AbsoluteSize.X
                                    local relativeY = (y - colorSpectrum.AbsolutePosition.Y) / colorSpectrum.AbsoluteSize.Y
                                    
                                    relativeX = math.clamp(relativeX, 0, 1)
                                    relativeY = math.clamp(relativeY, 0, 1)
                                    
                                    -- Convert to HSV then to RGB
                                    local hue = relativeX * 360
                                    local saturation = 1 - relativeY
                                    currentColor = Color3.fromHSV(hue/360, saturation, 1)
                                    updateColor()
                                end
                            end)
                            
                            -- Brightness slider
                            brightnessSlider.MouseButton1Down:Connect(function()
                                isDraggingBrightness = true
                            end)
                            
                            brightnessSlider.MouseButton1Up:Connect(function()
                                isDraggingBrightness = false
                            end)
                            
                            brightnessSlider.MouseMoved:Connect(function(x, y)
                                if isDraggingBrightness then
                                    local relativeX = (x - brightnessSlider.AbsolutePosition.X) / brightnessSlider.AbsoluteSize.X
                                    relativeX = math.clamp(relativeX, 0, 1)
                                    
                                    brightness = relativeX
                                    brightnessHandle.Position = UDim2.new(relativeX, 0, 0.5, 0)
                                    updateColor()
                                end
                            end)
                            
                            -- Toggle popup
                            local clickBox = Instance.new("TextButton")
                            clickBox.Name = "ClickBox"
                            clickBox.Parent = colorPicker
                            clickBox.Text = ""
                            clickBox.Size = UDim2.fromScale(1, 1)
                            clickBox.BackgroundTransparency = 1
                            clickBox.ZIndex = 2
                            
                            clickBox.MouseButton1Click:Connect(function()
                                pickerPopup.Visible = not pickerPopup.Visible
                            end)
                            
                            CreateRippleEffect(colorPicker)
                            
                            return {
                                SetColor = function(color)
                                    currentColor = color
                                    updateColor()
                                end,
                                
                                GetColor = function()
                                    return pickerPreview.BackgroundColor3
                                end
                            }
                        end
                    }
                }
            }
            
            -- Add to tabs table and return tab functions
            table.insert(tabs, {
                button = tabButton,
                content = tabContent
            })
            
            return tabData
        end,
        
        ToggleVisibility = function(visible)
            mainContainer.Visible = visible
        end,
        
        Destroy = function()
            SynthUI:Destroy()
        end
    }
    
    -- Select first tab by default
    if #tabs > 0 then
        tabs[1].content.Visible = true
        tabs[1].button.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabs[1].button.UIGradient.Enabled = true
    end
    
    return window
end

return Synth
