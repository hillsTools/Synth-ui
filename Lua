local Synth = {}

-- Services
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

-- Cleanup previous UI if in Studio
pcall(function()
    if RunService:IsStudio() then
        local playerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
        local existingUI = playerGui:FindFirstChild("Synth UI") or game:GetService("CoreGui"):FindFirstChild("Synth UI")
        if existingUI then
            existingUI:Destroy()
        end
    end
end)

-- Tween helper function
local function Tween(Object, Properties, Info)
    local tweenInfo = Info or TweenInfo.new(0.1, Enum.EasingStyle.Sine)
    local tween = TweenService:Create(Object, tweenInfo, Properties)
    tween:Play()
    return tween
end

-- Ripple effect function
local function AddRipple(Button)
    local Clickbox
    if Button:IsA("TextButton") then 
        Clickbox = Button
    else
        Clickbox = Instance.new("TextButton", Button)
        Clickbox.Text = ""
        Clickbox.Size = UDim2.fromScale(1, 1)
        Clickbox.ZIndex = 2
        Clickbox.BackgroundTransparency = 1
    end
    
    Clickbox.MouseButton1Click:Connect(function()
        task.spawn(function()
            local mouse = Players.LocalPlayer:GetMouse()
            local ripple = Instance.new("Frame", Button)
            ripple.Position = UDim2.fromOffset(mouse.X - Button.AbsolutePosition.X, mouse.Y - Button.AbsolutePosition.Y)
            ripple.BackgroundColor3 = Color3.fromRGB(33, 97, 200)
            ripple.Size = UDim2.fromOffset(0, 0)
            ripple.AnchorPoint = Vector2.new(0.5, 0.5)

            local Corner = Instance.new("UICorner", ripple)
            Corner.CornerRadius = UDim.new(1, 0)

            Tween(ripple, {Size = UDim2.fromOffset(50, 50)}, TweenInfo.new(0.76, Enum.EasingStyle.Quint))
            Tween(ripple, {BackgroundTransparency = 1}, TweenInfo.new(0.76, Enum.EasingStyle.Quint))
            game:GetService("Debris"):AddItem(ripple, 0.76)
        end)
    end)
    Button.ClipsDescendants = true
end

-- Draggable window function
local function MakeDraggable(Drag, Frame)
    local dragToggle = nil
    local dragSpeed = 0.08
    local dragInput = nil
    local dragStart = nil
    local dragPos = nil
    local Delta, Position, startPos
    
    local function updateInput(input)
        Delta = input.Position - dragStart
        Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
        Tween(Frame, {Position = Position}, TweenInfo.new(dragSpeed))
    end
    
    Drag.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UserInputService:GetFocusedTextBox() == nil then
            dragToggle = true
            dragStart = input.Position
            startPos = Frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    
    Drag.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            updateInput(input)
        end
    end)
end

-- Main Window Function
function Synth.Window(options)
    local options = options or {}
    local windowName = options.Name or "Synth UI"
    local size = options.Size or UDim2.fromOffset(570, 340)
    local position = options.Position or UDim2.new(0.5, 0, 0.5, 0)
    
    -- Main UI Container
    local SynthUI = Instance.new("ScreenGui")
    SynthUI.Name = "Synth UI"
    SynthUI.Parent = RunService:IsStudio() and Players.LocalPlayer.PlayerGui or game:GetService("CoreGui")
    SynthUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    SynthUI.ResetOnSpawn = false

    -- Main Container
    local MainContainer = Instance.new("Frame")
    MainContainer.Name = "MainContainer"
    MainContainer.Parent = SynthUI
    MainContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    MainContainer.BackgroundColor3 = Color3.fromRGB(44, 45, 44)
    MainContainer.BorderSizePixel = 0
    MainContainer.Position = position
    MainContainer.Size = size
    MainContainer.Active = true

    -- Border with gradient
    local Border = Instance.new("Frame")
    Border.Name = "Border"
    Border.Parent = MainContainer
    Border.AnchorPoint = Vector2.new(0.5, 0.5)
    Border.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Border.BorderSizePixel = 0
    Border.Position = UDim2.new(0.5, 0, 0.5, 0)
    Border.Size = UDim2.new(1, -8, 1, -8)

    -- Gradient for border
    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(44, 174, 255)),
        ColorSequenceKeypoint.new(0.42, Color3.fromRGB(82, 212, 255)),
        ColorSequenceKeypoint.new(0.47, Color3.fromRGB(42, 92, 255)),
        ColorSequenceKeypoint.new(0.52, Color3.fromRGB(82, 212, 255)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(123, 253, 255))
    }
    UIGradient.Rotation = -180
    UIGradient.Parent = Border

    -- Animate gradient
    spawn(function()
        while task.wait() do
            local rotation = UIGradient.Rotation
            if rotation == 180 then
                rotation = -181
            else    
                rotation = rotation + 1
            end
            UIGradient.Rotation = rotation
        end
    end)

    -- Real Container
    local RealContainer = Instance.new("Frame")
    RealContainer.Name = "RealContainer"
    RealContainer.Parent = Border
    RealContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    RealContainer.BackgroundColor3 = Color3.fromRGB(44, 45, 44)
    RealContainer.BorderSizePixel = 0
    RealContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
    RealContainer.Size = UDim2.new(1, -4, 1, -4)

    -- Top Bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Parent = RealContainer
    TopBar.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
    TopBar.BorderSizePixel = 0
    TopBar.Position = UDim2.new(0, 5, 0, 5)
    TopBar.Size = UDim2.new(1, -10, 0, 35)

    -- Window Title
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.Parent = TopBar
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.Size = UDim2.new(0, 200, 1, 0)
    TitleLabel.Font = Enum.Font.ArialBold
    TitleLabel.Text = windowName
    TitleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    TitleLabel.TextSize = 14
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Close Button (PC)
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = TopBar
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -5, 0.5, 0)
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Font = Enum.Font.ArialBold
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(220, 220, 220)
    CloseButton.TextSize = 14
    CloseButton.MouseButton1Click:Connect(function()
        SynthUI:Destroy()
    end)

    -- Make window draggable
    MakeDraggable(TopBar, MainContainer)

    -- Mobile Controls
    local MobileControls = Instance.new("Frame")
    MobileControls.Name = "MobileControls"
    MobileControls.Parent = RealContainer
    MobileControls.BackgroundTransparency = 1
    MobileControls.Position = UDim2.new(0, 5, 1, -40)
    MobileControls.Size = UDim2.new(1, -10, 0, 35)
    MobileControls.Visible = UserInputService.TouchEnabled

    -- Open/Close Buttons for Mobile
    local MobileOpenButton = Instance.new("TextButton")
    MobileOpenButton.Name = "OpenButton"
    MobileOpenButton.Parent = MobileControls
    MobileOpenButton.BackgroundColor3 = Color3.fromRGB(52, 164, 216)
    MobileOpenButton.BorderSizePixel = 0
    MobileOpenButton.Position = UDim2.new(0, 0, 0, 0)
    MobileOpenButton.Size = UDim2.new(0.5, -5, 1, 0)
    MobileOpenButton.Font = Enum.Font.ArialBold
    MobileOpenButton.Text = "Open"
    MobileOpenButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    MobileOpenButton.TextSize = 14

    local MobileCloseButton = Instance.new("TextButton")
    MobileCloseButton.Name = "CloseButton"
    MobileCloseButton.Parent = MobileControls
    MobileCloseButton.BackgroundColor3 = Color3.fromRGB(216, 52, 52)
    MobileCloseButton.BorderSizePixel = 0
    MobileCloseButton.Position = UDim2.new(0.5, 5, 0, 0)
    MobileCloseButton.Size = UDim2.new(0.5, -5, 1, 0)
    MobileCloseButton.Font = Enum.Font.ArialBold
    MobileCloseButton.Text = "Close"
    MobileCloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    MobileCloseButton.TextSize = 14

    -- Toggle visibility for mobile
    MobileOpenButton.MouseButton1Click:Connect(function()
        MainContainer.Visible = true
    end)
    
    MobileCloseButton.MouseButton1Click:Connect(function()
        MainContainer.Visible = false
    end)

    -- Watermark
    local Watermark = Instance.new("TextLabel")
    Watermark.Name = "Watermark"
    Watermark.Parent = RealContainer
    Watermark.AnchorPoint = Vector2.new(1, 1)
    Watermark.BackgroundTransparency = 1
    Watermark.Position = UDim2.new(1, -5, 1, -5)
    Watermark.Size = UDim2.new(0, 150, 0, 20)
    Watermark.Font = Enum.Font.ArialBold
    Watermark.Text = "Synth UI v1.0"
    Watermark.TextColor3 = Color3.fromRGB(150, 150, 150)
    Watermark.TextSize = 12
    Watermark.TextXAlignment = Enum.TextXAlignment.Right

    -- Player Profile Image
    local PlayerImage = Instance.new("ImageLabel")
    PlayerImage.Name = "PlayerImage"
    PlayerImage.Parent = RealContainer
    PlayerImage.AnchorPoint = Vector2.new(0, 1)
    PlayerImage.BackgroundTransparency = 1
    PlayerImage.Position = UDim2.new(0, 5, 1, -5)
    PlayerImage.Size = UDim2.new(0, 30, 0, 30)
    PlayerImage.Image = Players.LocalPlayer:GetPropertyChangedSignal("UserId"):Connect(function()
        PlayerImage.Image = "https://www.roblox.com/headshot-thumbnail/image?userId="..Players.LocalPlayer.UserId.."&width=420&height=420&format=png"
    end)
    PlayerImage.Image = "https://www.roblox.com/headshot-thumbnail/image?userId="..Players.LocalPlayer.UserId.."&width=420&height=420&format=png"

    -- Navigation Bar
    local NavBar = Instance.new("Frame")
    NavBar.Name = "NavBar"
    NavBar.Parent = RealContainer
    NavBar.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
    NavBar.BorderSizePixel = 0
    NavBar.Position = UDim2.new(0, 5, 0, 40)
    NavBar.Size = UDim2.new(0, 135, 1, -45)

    -- Tabs Container
    local Tabs = Instance.new("ScrollingFrame")
    Tabs.Name = "Tabs"
    Tabs.Parent = NavBar
    Tabs.Active = true
    Tabs.BackgroundTransparency = 1
    Tabs.Position = UDim2.new(0, 5, 0, 30)
    Tabs.Size = UDim2.new(1, -20, 1, -35)
    Tabs.ScrollBarThickness = 0
    Tabs.AutomaticCanvasSize = Enum.AutomaticSize.Y

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = Tabs
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 3)

    -- Content Area
    local ContentArea = Instance.new("Frame")
    ContentArea.Name = "ContentArea"
    ContentArea.Parent = RealContainer
    ContentArea.BackgroundColor3 = Color3.fromRGB(41, 42, 41)
    ContentArea.BorderSizePixel = 0
    ContentArea.Position = UDim2.new(0, 147, 0, 47)
    ContentArea.Size = UDim2.new(1, -160, 1, -57)

    -- Store tabs
    local TabsTable = {}

    -- Return window functions
    return {
        Tab = function(tabOptions)
            local tabName = tabOptions.Name or "Tab"
            local tabIcon = tabOptions.Icon or nil
            
            local TabFrame = Instance.new("Frame")
            TabFrame.Name = tabName
            TabFrame.Parent = Tabs
            TabFrame.BackgroundTransparency = 1
            TabFrame.Size = UDim2.new(1, 0, 0, 21)

            local TabButton = Instance.new("TextButton")
            TabButton.Name = "TabButton"
            TabButton.Parent = TabFrame
            TabButton.BackgroundTransparency = 1
            TabButton.Size = UDim2.new(1, 0, 1, 0)
            TabButton.Font = Enum.Font.ArialBold
            TabButton.Text = tabName
            TabButton.TextColor3 = Color3.fromRGB(220, 220, 220)
            TabButton.TextSize = 14
            TabButton.TextXAlignment = Enum.TextXAlignment.Left

            local TabGradient = Instance.new("UIGradient")
            TabGradient.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0.00, Color3.fromRGB(44, 174, 255)),
                ColorSequenceKeypoint.new(1.00, Color3.fromRGB(123, 253, 255))
            }
            TabGradient.Rotation = -180
            TabGradient.Parent = TabButton
            TabGradient.Enabled = false

            local TabContent = Instance.new("ScrollingFrame")
            TabContent.Name = tabName.."Content"
            TabContent.Parent = ContentArea
            TabContent.BackgroundTransparency = 1
            TabContent.Size = UDim2.new(1, -10, 1, -10)
            TabContent.Position = UDim2.new(0.5, 0, 0.5, 0)
            TabContent.AnchorPoint = Vector2.new(0.5, 0.5)
            TabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
            TabContent.ScrollBarThickness = 5
            TabContent.ScrollBarImageColor3 = Color3.fromRGB(93, 93, 93)
            TabContent.Visible = false

            local ContentLayout = Instance.new("UIListLayout")
            ContentLayout.Parent = TabContent
            ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
            ContentLayout.Padding = UDim.new(0, 6)

            -- Add to tabs table
            local tabIndex = #TabsTable + 1
            local tabData = {
                frame = TabFrame,
                content = TabContent
            }
            TabsTable[tabIndex] = tabData

            -- Tab click function
            local function onClick()
                TabContent.Visible = true
                TabGradient.Enabled = true
                
                local tween = Tween(TabButton, {Position = UDim2.fromOffset(4, 0)})
                tween.Completed:Once(function()
                    Tween(TabButton, {Position = UDim2.fromOffset(0, 0)})
                end)
                
                -- Hide other tabs
                for i, tab in pairs(TabsTable) do
                    if i ~= tabIndex then
                        Tween(tab.frame.TextButton, {Position = UDim2.fromOffset(0, 0)})
                        tab.frame.TextButton.UIGradient.Enabled = false
                        tab.content.Visible = false
                    end
                end
            end

            -- Set first tab as active
            if tabIndex == 1 then
                onClick()
            end

            TabButton.MouseButton1Click:Connect(onClick)
            AddRipple(TabButton)

            return {
                Section = function(sectionOptions)
                    local sectionName = sectionOptions.Name or "Section"
                    local alignment = sectionOptions.Alignment or "Center" -- "Left", "Center", "Right"
                    
                    local Section = Instance.new("Frame")
                    Section.Name = "Section"
                    Section.Parent = TabContent
                    Section.BackgroundTransparency = 1
                    Section.Size = UDim2.new(1, -17, 0, 21)

                    local SectionImage = Instance.new("ImageLabel")
                    SectionImage.Name = "SectionImage"
                    SectionImage.Parent = Section
                    SectionImage.BackgroundTransparency = 1
                    SectionImage.Size = UDim2.new(1, 0, 0, 0)
                    SectionImage.Image = "rbxassetid://115990690686320"

                    local SectionGradient = Instance.new("UIGradient")
                    SectionGradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(71, 160, 255)),
                        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(51, 245, 255)),
                        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(71, 160, 255))
                    }
                    SectionGradient.Parent = SectionImage

                    local SectionLabel = Instance.new("TextLabel")
                    SectionLabel.Name = "SectionLabel"
                    SectionLabel.Parent = SectionImage
                    SectionLabel.AnchorPoint = Vector2.new(0.5, 0)
                    SectionLabel.BackgroundTransparency = 1
                    SectionLabel.Position = UDim2.new(0.5, 0, 0, 0)
                    SectionLabel.Size = UDim2.new(1, 0, 0, 21)
                    SectionLabel.Font = Enum.Font.ArialBold
                    SectionLabel.Text = sectionName
                    SectionLabel.TextColor3 = Color3.fromRGB(213, 213, 213)
                    SectionLabel.TextSize = 14
                    SectionLabel.TextStrokeColor3 = Color3.fromRGB(250, 250, 250)
                    
                    -- Set alignment
                    if alignment == "Left" then
                        SectionLabel.TextXAlignment = Enum.TextXAlignment.Left
                        SectionLabel.AnchorPoint = Vector2.new(0, 0)
                        SectionLabel.Position = UDim2.new(0, 0, 0, 0)
                    elseif alignment == "Right" then
                        SectionLabel.TextXAlignment = Enum.TextXAlignment.Right
                        SectionLabel.AnchorPoint = Vector2.new(1, 0)
                        SectionLabel.Position = UDim2.new(1, 0, 0, 0)
                    else -- Center
                        SectionLabel.TextXAlignment = Enum.TextXAlignment.Center
                    end

                    local SectionLine = Instance.new("ImageLabel")
                    SectionLine.Name = "SectionLine"
                    SectionLine.Parent = SectionLabel
                    SectionLine.AnchorPoint = Vector2.new(0, 1)
                    SectionLine.BackgroundTransparency = 1
                    SectionLine.Position = UDim2.new(0, 0, 1, 0)
                    SectionLine.Size = UDim2.new(1, 0, 0, 3)
                    SectionLine.Image = "rbxassetid://115990690686320"

                    local LineGradient = Instance.new("UIGradient")
                    LineGradient.Color = ColorSequence.new{
                        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(71, 160, 255)),
                        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(51, 245, 255)),
                        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(71, 160, 255))
                    }
                    LineGradient.Parent = SectionLine

                    return {
                        Toggle = function(toggleOptions, callback)
                            local toggleName = toggleOptions.Name or "Toggle"
                            local defaultValue = toggleOptions.Default or false
                            
                            local Toggle = Instance.new("Frame")
                            Toggle.Name = "Toggle"
                            Toggle.Parent = TabContent
                            Toggle.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            Toggle.BorderSizePixel = 0
                            Toggle.Size = UDim2.new(1, -17, 0, 30)

                            local ToggleLabel = Instance.new("TextLabel")
                            ToggleLabel.Name = "Label"
                            ToggleLabel.Parent = Toggle
                            ToggleLabel.BackgroundTransparency = 1
                            ToggleLabel.Position = UDim2.new(0, 8, 0, 0)
                            ToggleLabel.Size = UDim2.new(1, -100, 1, 0)
                            ToggleLabel.Font = Enum.Font.ArialBold
                            ToggleLabel.Text = toggleName
                            ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            ToggleLabel.TextSize = 14
                            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left

                            local ToggleFrame = Instance.new("Frame")
                            ToggleFrame.Name = "ToggleFrame"
                            ToggleFrame.Parent = Toggle
                            ToggleFrame.AnchorPoint = Vector2.new(1, 0.5)
                            ToggleFrame.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
                            ToggleFrame.BorderSizePixel = 0
                            ToggleFrame.Position = UDim2.new(1, -8, 0.5, 0)
                            ToggleFrame.Size = UDim2.new(0, 50, 0, 21)

                            local ToggleCircle = Instance.new("Frame")
                            ToggleCircle.Name = "ToggleCircle"
                            ToggleCircle.Parent = ToggleFrame
                            ToggleCircle.AnchorPoint = Vector2.new(0, 0.5)
                            ToggleCircle.BackgroundColor3 = Color3.fromRGB(47, 148, 198)
                            ToggleCircle.BorderSizePixel = 0
                            ToggleCircle.Position = UDim2.new(0, 5, 0.5, 0)
                            ToggleCircle.Size = UDim2.new(0, 15, 0, 15)

                            -- Set initial state
                            local isEnabled = defaultValue
                            if isEnabled then
                                ToggleFrame.BackgroundColor3 = Color3.fromRGB(46, 47, 46)
                                ToggleCircle.BackgroundColor3 = Color3.fromRGB(52, 164, 216)
                                ToggleCircle.Position = UDim2.new(1, -20, 0.5, 0)
                            end

                            -- Click handler
                            local Clickbox = Instance.new("TextButton", Toggle)
                            Clickbox.Text = ""
                            Clickbox.Size = UDim2.fromScale(1, 1)
                            Clickbox.ZIndex = 2
                            Clickbox.BackgroundTransparency = 1
                            
                            Clickbox.MouseButton1Click:Connect(function()
                                isEnabled = not isEnabled
                                
                                if isEnabled then
                                    Tween(ToggleFrame, {BackgroundColor3 = Color3.fromRGB(46, 47, 46)})
                                    Tween(ToggleCircle, {
                                        BackgroundColor3 = Color3.fromRGB(52, 164, 216),
                                        Position = UDim2.new(1, -20, 0.5, 0)
                                    })
                                else
                                    Tween(ToggleFrame, {BackgroundColor3 = Color3.fromRGB(39, 40, 39)})
                                    Tween(ToggleCircle, {
                                        BackgroundColor3 = Color3.fromRGB(47, 148, 198),
                                        Position = UDim2.new(0, 5, 0.5, 0)
                                    })
                                end
                                
                                if callback then callback(isEnabled) end
                            end)
                            
                            AddRipple(Clickbox)
                        end,
                        
                        Button = function(buttonOptions, callback)
                            local buttonName = buttonOptions.Name or "Button"
                            
                            local Button = Instance.new("Frame")
                            Button.Name = "Button"
                            Button.Parent = TabContent
                            Button.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            Button.BorderSizePixel = 0
                            Button.Size = UDim2.new(1, -17, 0, 30)
                            Button.ClipsDescendants = true

                            local ButtonLabel = Instance.new("TextLabel")
                            ButtonLabel.Name = "Label"
                            ButtonLabel.Parent = Button
                            ButtonLabel.BackgroundTransparency = 1
                            ButtonLabel.Position = UDim2.new(0, 8, 0, 0)
                            ButtonLabel.Size = UDim2.new(1, -100, 1, 0)
                            ButtonLabel.Font = Enum.Font.ArialBold
                            ButtonLabel.Text = buttonName
                            ButtonLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            ButtonLabel.TextSize = 14
                            ButtonLabel.TextXAlignment = Enum.TextXAlignment.Left

                            local ButtonIcon = Instance.new("ImageLabel")
                            ButtonIcon.Name = "Icon"
                            ButtonIcon.Parent = Button
                            ButtonIcon.AnchorPoint = Vector2.new(1, 0.5)
                            ButtonIcon.BackgroundTransparency = 1
                            ButtonIcon.Position = UDim2.new(1, -8, 0.5, 0)
                            ButtonIcon.Size = UDim2.new(0, 20, 0, 20)
                            ButtonIcon.Image = "rbxassetid://81903642911217"
                            ButtonIcon.ImageColor3 = Color3.fromRGB(52, 164, 216)

                            local Clickbox = Instance.new("TextButton", Button)
                            Clickbox.Text = ""
                            Clickbox.Size = UDim2.fromScale(1, 1)
                            Clickbox.ZIndex = 2
                            Clickbox.BackgroundTransparency = 1
                            Clickbox.MouseButton1Click:Connect(function()
                                if callback then callback() end
                            end)
                            
                            AddRipple(Clickbox)
                        end,
                        
                        Slider = function(sliderOptions, callback)
                            local sliderName = sliderOptions.Name or "Slider"
                            local minValue = sliderOptions.Min or 0
                            local maxValue = sliderOptions.Max or 100
                            local defaultValue = sliderOptions.Default or math.floor((maxValue - minValue) / 2)
                            
                            local Slider = Instance.new("Frame")
                            Slider.Name = "Slider"
                            Slider.Parent = TabContent
                            Slider.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            Slider.BorderSizePixel = 0
                            Slider.Size = UDim2.new(1, -17, 0, 30)

                            local SliderLabel = Instance.new("TextLabel")
                            SliderLabel.Name = "Label"
                            SliderLabel.Parent = Slider
                            SliderLabel.BackgroundTransparency = 1
                            SliderLabel.Position = UDim2.new(0, 8, 0, 0)
                            SliderLabel.Size = UDim2.new(1, -100, 1, 0)
                            SliderLabel.Font = Enum.Font.ArialBold
                            SliderLabel.Text = sliderName
                            SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            SliderLabel.TextSize = 14
                            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left

                            local SliderTrack = Instance.new("Frame")
                            SliderTrack.Name = "Track"
                            SliderTrack.Parent = Slider
                            SliderTrack.AnchorPoint = Vector2.new(1, 0.5)
                            SliderTrack.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
                            SliderTrack.BorderSizePixel = 0
                            SliderTrack.Position = UDim2.new(1, -8, 0.5, 0)
                            SliderTrack.Size = UDim2.new(0, 100, 0, 15)

                            local SliderFill = Instance.new("Frame")
                            SliderFill.Name = "Fill"
                            SliderFill.Parent = SliderTrack
                            SliderFill.BackgroundColor3 = Color3.fromRGB(47, 148, 198)
                            SliderFill.BorderSizePixel = 0
                            SliderFill.Size = UDim2.new((defaultValue - minValue) / (maxValue - minValue), 0, 1, 0)

                            local SliderValue = Instance.new("TextLabel")
                            SliderValue.Name = "Value"
                            SliderValue.Parent = SliderTrack
                            SliderValue.BackgroundTransparency = 1
                            SliderValue.Size = UDim2.new(1, 0, 1, 0)
                            SliderValue.Font = Enum.Font.ArialBold
                            SliderValue.Text = tostring(defaultValue)
                            SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
                            SliderValue.TextSize = 14

                            -- Slider logic
                            local ClickBox = Instance.new("TextButton")
                            ClickBox.Parent = SliderTrack
                            ClickBox.Text = ""
                            ClickBox.BackgroundTransparency = 1
                            ClickBox.ZIndex = 2
                            ClickBox.Size = UDim2.fromScale(1, 1)
                            
                            local isDragging = false
                            local lastValue = defaultValue
                            
                            ClickBox.MouseButton1Down:Connect(function()
                                isDragging = true
                                
                                while isDragging do
                                    local mouse = Players.LocalPlayer:GetMouse()
                                    local percent = math.clamp(
                                        (mouse.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 
                                        0, 
                                        1
                                    )
                                    local value = math.floor(minValue + (percent * (maxValue - minValue)))
                                    
                                    Tween(SliderFill, {
                                        Size = UDim2.new(percent, 0, 1, 0)
                                    }, TweenInfo.new(0.1, Enum.EasingStyle.Quint))
                                    
                                    if value ~= lastValue then
                                        SliderValue.Text = tostring(value)
                                        lastValue = value
                                        if callback then callback(value) end
                                    end
                                    
                                    game:GetService("RunService").Heartbeat:Wait()
                                end
                            end)
                            
                            UserInputService.InputEnded:Connect(function(input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    isDragging = false
                                end
                            end)
                        end,
                        
                        Dropdown = function(dropdownOptions, callback)
                            local dropdownName = dropdownOptions.Name or "Dropdown"
                            local options = dropdownOptions.Options or {"Option 1", "Option 2"}
                            local default = dropdownOptions.Default or options[1]
                            
                            local Dropdown = Instance.new("Frame")
                            Dropdown.Name = "Dropdown"
                            Dropdown.Parent = TabContent
                            Dropdown.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            Dropdown.BorderSizePixel = 0
                            Dropdown.Size = UDim2.new(1, -17, 0, 30)
                            Dropdown.AutomaticSize = Enum.AutomaticSize.Y
                            Dropdown.ClipsDescendants = true

                            local DropdownLabel = Instance.new("TextLabel")
                            DropdownLabel.Name = "Label"
                            DropdownLabel.Parent = Dropdown
                            DropdownLabel.BackgroundTransparency = 1
                            DropdownLabel.Position = UDim2.new(0, 8, 0, 0)
                            DropdownLabel.Size = UDim2.new(1, -100, 0, 30)
                            DropdownLabel.Font = Enum.Font.ArialBold
                            DropdownLabel.Text = dropdownName
                            DropdownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            DropdownLabel.TextSize = 14
                            DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left

                            local DropdownIcon = Instance.new("ImageLabel")
                            DropdownIcon.Name = "Icon"
                            DropdownIcon.Parent = Dropdown
                            DropdownIcon.AnchorPoint = Vector2.new(1, 0)
                            DropdownIcon.BackgroundTransparency = 1
                            DropdownIcon.Position = UDim2.new(1, -8, 0, 6)
                            DropdownIcon.Size = UDim2.new(0, 20, 0, 20)
                            DropdownIcon.Image = "rbxassetid://70441862151102"
                            DropdownIcon.ImageColor3 = Color3.fromRGB(52, 164, 216)

                            local DropdownList = Instance.new("ScrollingFrame")
                            DropdownList.Name = "List"
                            DropdownList.Parent = Dropdown
                            DropdownList.Active = true
                            DropdownList.BackgroundTransparency = 1
                            DropdownList.Position = UDim2.new(0, 0, 0, 30)
                            DropdownList.Size = UDim2.new(1, 0, 0, 0)
                            DropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
                            DropdownList.AutomaticCanvasSize = Enum.AutomaticSize.Y
                            DropdownList.ScrollBarThickness = 5
                            DropdownList.Visible = false

                            local ListLayout = Instance.new("UIListLayout")
                            ListLayout.Parent = DropdownList
                            ListLayout.SortOrder = Enum.SortOrder.LayoutOrder

                            local DropdownValue = Instance.new("TextLabel")
                            DropdownValue.Name = "Value"
                            DropdownValue.Parent = Dropdown
                            DropdownValue.AnchorPoint = Vector2.new(1, 0)
                            DropdownValue.BackgroundTransparency = 1
                            DropdownValue.Position = UDim2.new(1, -35, 0, 0)
                            DropdownValue.Size = UDim2.new(0, 100, 0, 30)
                            DropdownValue.Font = Enum.Font.SourceSansBold
                            DropdownValue.Text = tostring(default)
                            DropdownValue.TextColor3 = Color3.fromRGB(52, 164, 216)
                            DropdownValue.TextSize = 14
                            DropdownValue.TextXAlignment = Enum.TextXAlignment.Right

                            -- Populate dropdown
                            for _, option in ipairs(options) do
                                local OptionButton = Instance.new("TextButton")
                                OptionButton.Name = "Option"
                                OptionButton.Parent = DropdownList
                                OptionButton.BackgroundColor3 = Color3.fromRGB(39, 40, 39)
                                OptionButton.BorderSizePixel = 0
                                OptionButton.Size = UDim2.new(1, 0, 0, 21)
                                OptionButton.AutoButtonColor = false
                                OptionButton.Font = Enum.Font.SourceSans
                                OptionButton.Text = tostring(option)
                                OptionButton.TextColor3 = Color3.fromRGB(208, 208, 208)
                                OptionButton.TextSize = 14
                                
                                OptionButton.MouseButton1Click:Connect(function()
                                    DropdownValue.Text = tostring(option)
                                    if callback then callback(option) end
                                    toggleDropdown()
                                end)
                            end

                            -- Dropdown toggle function
                            local isOpen = false
                            local function toggleDropdown()
                                isOpen = not isOpen
                                DropdownIcon.Rotation = isOpen and 180 or 0
                                
                                if isOpen then
                                    DropdownList.Visible = true
                                    DropdownList.Size = UDim2.new(1, 0, 0, math.min(#options * 21, 105))
                                else
                                    DropdownList.Visible = false
                                    DropdownList.Size = UDim2.new(1, 0, 0, 0)
                                end
                            end

                            -- Click handler
                            local Clickbox = Instance.new("TextButton", Dropdown)
                            Clickbox.Text = ""
                            Clickbox.Size = UDim2.new(1, -17, 0, 30)
                            Clickbox.ZIndex = 2
                            Clickbox.BackgroundTransparency = 1
                            Clickbox.MouseButton1Click:Connect(toggleDropdown)

                            AddRipple(Clickbox)
                        end,
                        
                        ColorPicker = function(colorOptions, callback)
                            local pickerName = colorOptions.Name or "Color Picker"
                            local defaultColor = colorOptions.Default or Color3.fromRGB(255, 0, 0)
                            
                            local ColorPicker = Instance.new("Frame")
                            ColorPicker.Name = "ColorPicker"
                            ColorPicker.Parent = TabContent
                            ColorPicker.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                            ColorPicker.BorderSizePixel = 0
                            ColorPicker.Size = UDim2.new(1, -17, 0, 30)

                            local PickerLabel = Instance.new("TextLabel")
                            PickerLabel.Name = "Label"
                            PickerLabel.Parent = ColorPicker
                            PickerLabel.BackgroundTransparency = 1
                            PickerLabel.Position = UDim2.new(0, 8, 0, 0)
                            PickerLabel.Size = UDim2.new(1, -100, 1, 0)
                            PickerLabel.Font = Enum.Font.ArialBold
                            PickerLabel.Text = pickerName
                            PickerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            PickerLabel.TextSize = 14
                            PickerLabel.TextXAlignment = Enum.TextXAlignment.Left

                            local ColorPreview = Instance.new("Frame")
                            ColorPreview.Name = "Preview"
                            ColorPreview.Parent = ColorPicker
                            ColorPreview.AnchorPoint = Vector2.new(1, 0.5)
                            ColorPreview.BackgroundColor3 = defaultColor
                            ColorPreview.BorderSizePixel = 0
                            ColorPreview.Position = UDim2.new(1, -8, 0.5, 0)
                            ColorPreview.Size = UDim2.new(0, 50, 0, 21)

                            -- Color picker popup would go here (implementation omitted for brevity)
                            -- You would typically create a popup window with hue/saturation/brightness pickers
                            
                            local Clickbox = Instance.new("TextButton", ColorPicker)
                            Clickbox.Text = ""
                            Clickbox.Size = UDim2.fromScale(1, 1)
                            Clickbox.ZIndex = 2
                            Clickbox.BackgroundTransparency = 1
                            
                            Clickbox.MouseButton1Click:Connect(function()
                                -- Open color picker popup here
                                -- For now we'll just cycle through some colors
                                local colors = {
                                    Color3.fromRGB(255, 0, 0),
                                    Color3.fromRGB(0, 255, 0),
                                    Color3.fromRGB(0, 0, 255),
                                    Color3.fromRGB(255, 255, 0),
                                    Color3.fromRGB(0, 255, 255),
                                    Color3.fromRGB(255, 0, 255)
                                }
                                
                                local currentIndex = 1
                                for i, color in ipairs(colors) do
                                    if color == ColorPreview.BackgroundColor3 then
                                        currentIndex = i
                                        break
                                    end
                                end
                                
                                local nextIndex = (currentIndex % #colors) + 1
                                local newColor = colors[nextIndex]
                                
                                Tween(ColorPreview, {BackgroundColor3 = newColor})
                                if callback then callback(newColor) end
                            end)
                            
                            AddRipple(Clickbox)
                        end,
                        
                        Label = function(labelOptions)
                            local labelText = labelOptions.Text or "Label"
                            local alignment = labelOptions.Alignment or "Left" -- "Left", "Center", "Right"
                            
                            local Label = Instance.new("TextLabel")
                            Label.Name = "Label"
                            Label.Parent = TabContent
                            Label.BackgroundTransparency = 1
                            Label.Size = UDim2.new(1, -17, 0, 20)
                            Label.Font = Enum.Font.ArialBold
                            Label.Text = labelText
                            Label.TextColor3 = Color3.fromRGB(220, 220, 220)
                            Label.TextSize = 14
                            
                            if alignment == "Center" then
                                Label.TextXAlignment = Enum.TextXAlignment.Center
                            elseif alignment == "Right" then
                                Label.TextXAlignment = Enum.TextXAlignment.Right
                            else
                                Label.TextXAlignment = Enum.TextXAlignment.Left
                            end
                        end
                    }
                end
            }
        end
    }
end

return Synth
